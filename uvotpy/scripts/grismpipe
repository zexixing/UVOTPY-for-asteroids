#! /usr/bin/perl

# pipe2gr2 GRISM processing
# Quick and dirty pipeline to make a badpix file and mod8 correct the det image

# Stephen Holland, 2005 Feb 16, v0.1 (first try)
# Stephen Holland, 2005 Mar  1, v0.2 (streamline it a bit)
# Stephen Holland, 2005 Mar 17, v0.3 (reads RA,Dec from files)
# Paul Kuin hack of pipe2 2007 oct 15

use strict;
use warnings;

use Astro::FITS::CFITSIO qw(:constants :longnames);

print "pipe2gr2: grism reprocessing \n";
print "pipe2gr2: This version script by NPMK (MSSL) \n";
print "\n";

my $chatter = 1;
my $cleanup = "YES";
my $clobber = "YES";
my $history = "YES";

# Calibration files
my $badpixlist = "CALDB";
my $flatfile   = "CALDB";
my $alignfile  = "CALDB";
my $teldef     = "CALDB";
my $zerofile   = "CALDB";
my $coinfile   = "CALDB";

my $distfile   = "/sciencesoft/CALDB/data/swift/uvota/bcf/grism/swugrdist20041120v001.fits";
$distfile = "CALDB" unless ( -e $distfile );

my $aspcorr = "aspcorr.fit";
my $attfile2 = "attfile_corrected.fits";
my $det_sources = "";

my $command = "";
my $comment = "";
my $status = 0;

die "usage: $0 infile_root [attitude_file] [spec_file] \n" if ( $#ARGV < 0 );

my $file_root = $ARGV[0];
my $file_ext  = $ARGV[1];

# Set the name of the attitude file
my $attitude_file = "";
if ( $#ARGV == 0 ) {
    my $root = $1 if ( $file_root =~ m/(sw\d{11})u\w{2}/ );
    $attitude_file = "../../auxil/".$root."uat.fits";
} else {
    $attitude_file = $ARGV[1];
}
# Check that the attitude file exists.
die "error, $attitude_file does not exist, $!\n" unless ( -e $attitude_file );

my $specfile = "/Volumes/users/Users/kuin/specfiles/usnob1.spec";

if ( $#ARGV == 2 ) {
    $specfile = $ARGV[2];
}
# Check that the specfile file exists.
die "error, $specfile , e.g., usnob1.spec does not exist, $!\n" unless ( -e $specfile );

# Extract the RA and Dec and other keywords from the RAW image.
my $ra = -99.999;
my $dec = -99.999;
my $roll = -99.999;
my $wheelpos = 999;
my $starttime = 123456789.0;
#
# read the keywords 

my $extension = $file_root."_rw.img+0";
my $fptr = undef;
&fits_open_file($fptr,$extension,READONLY(),$status);
die "error opening $extension for reading, status = $status, $!\n" if ( $status != 0 );
&fits_read_keyword($fptr,'WHEELPOS',$wheelpos,$comment,$status);
warn "warning, unable to read WHEELPOS, status = $status, $!\n" if ( $status != 0 );
&fits_close_file($fptr,$status);
warn "warning unable to close $extension, status = $status, $!\n" if ( $status != 0 );
#
$extension = $file_root."_rw.img+1";
$fptr = undef;
&fits_open_file($fptr,$extension,READONLY(),$status);
die "error opening $extension for reading, status = $status, $!\n" if ( $status != 0 );
&fits_read_keyword($fptr,'RA_PNT',$ra,$comment,$status);
warn "warning, unable to read RA_PNT from $extension, status = $status, $!\n" if ( $status != 0 );
&fits_read_keyword($fptr,'DEC_PNT',$dec,$comment,$status);
warn "warning, unable to read DEC_PNT from $extension, status = $status, $!\n" if ( $status != 0 );
&fits_read_keyword($fptr,'PA_PNT',$roll,$comment,$status);
warn "warning, unable to read PA_PNT from $extension, status = $status, $!\n" if ( $status != 0 );
&fits_read_keyword($fptr,'TSTART',$starttime,$comment,$status);
warn "warning, unable to read TSTART from $extension, status = $status, $!\n" if ( $status != 0 );
&fits_close_file($fptr,$status);
warn "warning unable to close $extension, status = $status, $!\n" if ( $status != 0 );
#
my $raw_file = $file_root."_rw.img";
die "error, $raw_file does not exist, $!\n" unless ( -e $raw_file );
my $det_file = $file_root."_dt.img";
my $new_detfile = $file_root."_dt.img.old";
if ( $clobber ) {
    warn "warning, existing $det_file will be renamed $new_detfile" if ( -e $det_file );
} else {
# rename the old det file
   $command = "mv -v $det_file $new_detfile";
   system( $command ) unless ( -e $det_file );
}
#
# Print some header information.

print "\n";
print "      Command: $0 @ARGV\n";
my $date = `date`;
chomp($date);
print "           Date: $date\n";
print "\n";
print "       det data: $det_file\n";
print "       RAW data: $raw_file\n";
print "  Attitude data: $attitude_file\n";
print "       Pointing: RA=$ra, DEC=$dec, ROLL=$roll\n";
print " Wheel position: $wheelpos  (200 = normal ; 160 = clocked [Ugrism]) \n";
#
# Make the bad pixel list.

print "\n";
print "Make the bad pixel list...\n";
my $bp_file = $file_root."_bp.img";
if ( $clobber ) {
    warn "warning, existing $bp_file will be overwritten" if ( -e $bp_file );
} else {
    die "error, $bp_file already exists" if ( -e $bp_file );
}
$command = "uvotbadpix infile=$raw_file badpixlist=$badpixlist outfile=$bp_file compress=YES clobber=$clobber history=$history chatter=$chatter";
#
print "$command\n";
system( $command ) && die "system call failed for \"$command\", $!";
#
# Make the mod-8 map correction to the raw data

print "\n";
print "Make the mod-8 map...\n";
my $md_file = $file_root."_md.img";
if ( $clobber ) {
    warn "warning, existing $md_file will be overwritten" if ( -e $md_file );
} else {
    die "error, $md_file already exists" if ( -e $md_file );
}
my $modmap = $file_root."_mm.img";
if ( $clobber ) {
    warn "warning, existing $modmap will be overwritten" if ( -e $modmap );
} else {
    die "error, $modmap already exists" if ( -e $modmap );
}
$command = "uvotmodmap infile=$raw_file badpixfile=$bp_file outfile=$md_file mod8prod=NO mod8file=$modmap nsig=3 ncell=16 subimage=NO xmin=0 xmax=2047 ymin=0 ymax=2047 clobber=$clobber history=$history chatter=$chatter";
#
print "$command\n";
system( $command ) && die "system call failed for \"$command\", $!";

# transform to detector coordinates

my $det_file_corr = $file_root."_mod8corr_dt.img";
#if ( $clobber ) {
#    warn "warning, existing $det_file_corr will be overwritten" if ( -e $det_file_corr );
#} else {
#    die "error, $det_file_corr already exists" if ( -e $det_file_corr );
#}
$command = "swiftxform ra=$ra dec=$dec roll=$roll infile=$md_file outfile=$det_file_corr to=DET attfile=$attitude_file teldeffile=$teldef method=AREA bitpix=-32 aberration=n seed=1 copyall=n cleanup=$cleanup chatter=$chatter history=$history clobber=$clobber";
#
print "$command\n";
system( $command ) && die "system call failed for \"$command\", $!";
#
#  GRISM ASPECT CORRECTION (pass 1 to generate attcorr.fits)
#
$command = "mv $det_file_corr $det_file";
print "\nfirst pass uvotgraspcorr\n\n";
print "$command\n";
system( $command ) && die "system call failed for \"$command\", $!";
$command = "uvotgraspcorr infile=$det_file catspec=$specfile distfile=$distfile outfile=$aspcorr  chatter=$chatter cleanup=$cleanup history=$history clobber=$clobber";
print "$command\n";
system( $command ) && die "system call failed for \"$command\", $!";
#
# get attitude file corrected 

$command = "uvotattcorr attfile=$attitude_file outfile=$attfile2 corrfile=$aspcorr clobber=$clobber";
print "$command\n";
system( $command ) && die "system call failed for \"$command\", $!";
#
# reprocess the raw file to det coordinates (pass 2)

$command = "swiftxform ra=$ra dec=$dec roll=$roll infile=$md_file outfile=$det_file_corr to=DET attfile=$attfile2 teldeffile=$teldef method=AREA bitpix=-32 aberration=n seed=1 copyall=n cleanup=$cleanup chatter=$chatter history=$history clobber=$clobber";
#
print "$command\n";
system( $command ) && die "system call failed for \"$command\", $!";

#  GRISM ASPECT CORRECTION (pass 2 with patched attitide file)
#
$command = "mv $det_file_corr $det_file";
print "second pass uvotgraspcorr";
print "$command\n";
system( $command ) && die "system call failed for \"$command\", $!";
$command = "uvotgraspcorr infile=$det_file catspec=$specfile distfile=$distfile outfile=$aspcorr  chatter=$chatter cleanup=$cleanup history=$history clobber=YES";
print "$command\n";
system( $command ) && die "system call failed for \"$command\", $!";
#
my $ff_file=$det_file;
#
# Transform to SKY coordinates

print "\n";
print "Transform to SKY coordinates...\n";
my $sk_file = $file_root."_sk.img";
if ( $clobber ) {
    warn "warning, existing $sk_file will be overwritten" if ( -e $sk_file );
} else {
    die "error, $sk_file already exists" if ( -e $sk_file );
}
die "error, $attitude_file does not exist, $!" unless ( -e $attitude_file );
$command = "swiftxform infile=$ff_file outfile=$sk_file attfile=$attitude_file alignfile=$alignfile method=AREA to=SKY ra=$ra dec=$dec roll=0.0 teldeffile=$teldef bitpix=-32 zeronulls=NO aberration=NO seed=-1956 copyall=NO extempty=YES allempty=NO history=$history clobber=$clobber cleanup=$cleanup chatter=$chatter";
#
print "$command\n";
system( $command ) && die "system call failed for \"$command\", $!";
#
#  source map for det file
#
#my $sex_conf  = "uvot.grism.v1.sex";
#my $sex_output = $file_root."sex_out.fit";
#my $prep_src_lis = "prep_src.fit";
#my $outputfile = "myoutputfile";
#
# run Sextractor on the mod8 corrected DET image to get potential sources
#
#$command = "sex $det_file_corr -c $sex_conf -catalog_name $sex_output"; 
#print "$command\n";
#system( $command ) && die "system call failed for \"$command\", $!";
#
# 1. read [peak zero order, AKA source] source coords, screen for zero order properties; add borepoint
#   use cfitsio to read table 
#
#$command = "python /disk/xray7/npmk/swift/grism/prep_src_list.py $sex_output $prep_src_lis";
#print "$command\n";
#system( $command ) && die "system call failed for \"$command\", $!";
#
# 2. get transform from DET -> SKY
#
#$command = "getxform  from=DET to=SKY teldef=$teldef image=no outfile=TRANSFORM_DET2SKY.fit ra=$ra dec=$dec time=$starttime  attfile=$attitude_file";
#print "$command\n";
#system( $command ) && die "system call failed for \"$command\", $!";
#
# 5. get transform from SKY -> DET
#
#$command = "getxform  from=SKY to=DET teldef=$teldef image=no outfile=TRANSFORM_SKY2DET.fit ra=$ra dec=$dec time=$starttime  attfile=$attitude_file    ";
#print "$command\n";
#system( $command ) && die "system call failed for \"$command\", $!";
#
# 3. apply Xform to source list+borepoint[410nm, zero order] 
#
#$command = "applyxform $prep_src_lis  $outputfile TRANSFORM_SKY2DET.fit chatter=$chatter";
#print "$command\n";
#system( $command ) && die "system call failed for \"$command\", $!";
#
# 4. get UB1 sources 23' field centered on borepoint
#
# ????  "<pull the RA,DEC of the borepoint out of the $outputfile and put in $racentre, $decentre";
#$command = "scat -c ub1  $racentre $decentre";
#
#
# 6. apply Xform to source list UB1 -> DET 
#
#
# 7. match DET positions sources with UB1 positions, as function of colour range -> difference vectors [& distortion matrix]
#
#
# 8. if not yet done: [correct DET image for GRISM distortion] 
#
#
# 9. use difference vectors as function of colour range to find normalised [410nm, zero order] positions.
#
#
# 10. convert source list [normalisation point] coordinates to SKY coordinates & make region file 
#
#
# 11. extract zero order spectra [find the zero order angle over detector]
#
#
# 12. extract first order spectra [find the first order locations over detector relative to normalisation point]
#
#
# 13a. either: predict counts in second order from first order and substract
#
#
# 13b. or:     extract second order spectra [find the second order locations over detector relative to normalisation point] 
#
# 14. extract the minus-one order, if present
#
#
# 15. extract the third order, if possible.
#
# 
#  END
print "script grismpipe completed :) \n";
